"use strict";(self.webpackChunkdasarpemrogramanpython=self.webpackChunkdasarpemrogramanpython||[]).push([[8701],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>d});var t=n(7294);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function p(e,a){if(null==e)return{};var n,t,i=function(e,a){if(null==e)return{};var n,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=t.createContext({}),o=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},u=function(e){var a=o(e.components);return t.createElement(s.Provider,{value:a},e.children)},c="mdxType",k={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=o(n),m=i,d=c["".concat(s,".").concat(m)]||c[m]||k[m]||r;return n?t.createElement(d,l(l({ref:a},u),{},{components:n})):t.createElement(d,l({ref:a},u))}));function d(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=m;var p={};for(var s in a)hasOwnProperty.call(a,s)&&(p[s]=a[s]);p.originalType=e,p[c]="string"==typeof e?e:i,l[1]=p;for(var o=2;o<r;o++)l[o]=n[o];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4845:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>k,frontMatter:()=>r,metadata:()=>p,toc:()=>o});var t=n(7462),i=(n(7294),n(3905));const r={sidebar_position:57,title:"A.57. Python Eval & Exec",sidebar_label:"A.57. Eval & Exec"},l=void 0,p={unversionedId:"basic/eval-exec",id:"basic/eval-exec",title:"A.57. Python Eval & Exec",description:"Pada chapter ini kita akan mempelajari fungsi eval() untuk eksekusi expression, fungsi exec() untuk eksekusi syntax Python, dan fungsi compile().",source:"@site/docs/basic/eval-exec.md",sourceDirName:"basic",slug:"/basic/eval-exec",permalink:"/basic/eval-exec",draft:!1,tags:[],version:"current",sidebarPosition:57,frontMatter:{sidebar_position:57,title:"A.57. Python Eval & Exec",sidebar_label:"A.57. Eval & Exec"},sidebar:"tutorialSidebar",previous:{title:"A.56. Enumeration",permalink:"/basic/enum"},next:{title:"A.58. Iterable & Iterator",permalink:"/basic/iterable-iterator"}},s={},o=[{value:"A.57.1. Fungsi <code>eval()</code>",id:"a571-fungsi-eval",level:2},{value:"A.57.2. Fungsi <code>exec()</code>",id:"a572-fungsi-exec",level:2},{value:"A.57.3. Fungsi <code>compile()</code>",id:"a573-fungsi-compile",level:2},{value:"\u25c9 Compile <em>expression</em>",id:"-compile-expression",level:3},{value:"\u25c9 Compile <em>Python source code</em>",id:"-compile-python-source-code",level:3},{value:"Catatan chapter \ud83d\udcd1",id:"catatan-chapter-",level:2},{value:"\u25c9 Source code praktik",id:"-source-code-praktik",level:3},{value:"\u25c9 Referensi",id:"-referensi",level:3}],u={toc:o},c="wrapper";function k(e){let{components:a,...n}=e;return(0,i.kt)(c,(0,t.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Pada chapter ini kita akan mempelajari fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"eval()")," untuk eksekusi ",(0,i.kt)("em",{parentName:"p"},"expression"),", fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"exec()")," untuk eksekusi syntax Python, dan fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"compile()"),"."),(0,i.kt)("h2",{id:"a571-fungsi-eval"},"A.57.1. Fungsi ",(0,i.kt)("inlineCode",{parentName:"h2"},"eval()")),(0,i.kt)("p",null,"String berisi ekspresi seperti ",(0,i.kt)("inlineCode",{parentName:"p"},"PI * r * r")," bisa dieksekusi kemudian diambil hasilnya menggunakan fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"eval()"),". Cara penggunaannya sangat mudah, tulis saja ekspresi sebagai argument pemanggilan fungsi. Misalnya:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"a = 10\nb = 5\nc = 8\narea = eval('(a + b) / 20 + (c * c)')\nprint(area)\n# output \u279c 64.75\n")),(0,i.kt)("p",null,"Variabel ",(0,i.kt)("inlineCode",{parentName:"p"},"a"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"b"),", dan ",(0,i.kt)("inlineCode",{parentName:"p"},"c")," di ekspresi ",(0,i.kt)("inlineCode",{parentName:"p"},"'(a + b) / 20 + (c * c)'")," nilainya terisi oleh nilai variabel ",(0,i.kt)("inlineCode",{parentName:"p"},"a"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"b"),", dan ",(0,i.kt)("inlineCode",{parentName:"p"},"c")," yang sudah dideklarasikan sebelumnya."),(0,i.kt)("p",null,"Ekspresi string berisi apapun bisa digunakan pada fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"eval()")," ini, asalkan ekspresinya hanya 1 baris."),(0,i.kt)("p",null,"Jika ekspresi tidak valid, maka eksekusi fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"eval()")," menghasilkan error, dan ketika itu terjadi ada baiknya di-handle dengan baik. Contoh:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"try:\n    area = eval('(a + b asd / 20 + (c * c)')\nexcept Exception as err:\n    print(f\"error: {err}\")\n\n# output \u279c error: '(' was never closed (<string>, line 1)\n")),(0,i.kt)("p",null,"By default, variabel dalam ekspresi terisi oleh nilai variabel yang sudah dideklarasikan. Selain itu, nilai variabel juga bisa ditentukan secara eksplisit via parameter ke-2 atau ke-3 fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"eval()"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Jika ekspresi berisi variabel yang kesemuanya ditentukan secara eksplisit, bisa gunakan parameter ke-2."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},'area = eval(\'PI * r * r\', { "PI": 3.14, "r": 10 })\nprint(area)\n# output \u279c 314.0\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Jika eskresi berisi variabel yang hanya sebagaian saja yang nilainya ditentukan secara eksplisit, maka gunakan ",(0,i.kt)("inlineCode",{parentName:"p"},"globals()")," sebagai argument parameter ke-2 dan tulis variabel pada parameter ke-3."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"PI = 3.14\narea = eval('PI * r * r', globals(), { \"r\": 10 })\nprint(area)\n# output \u279c 314.0\n")))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Pemanggilan ",(0,i.kt)("inlineCode",{parentName:"p"},"eval('expr')")," tanpa parameter ke-2 dan ke-3 adalah ekuivalen dengan statement ",(0,i.kt)("inlineCode",{parentName:"p"},"eval('expr', globals(), locals())"))),(0,i.kt)("h2",{id:"a572-fungsi-exec"},"A.57.2. Fungsi ",(0,i.kt)("inlineCode",{parentName:"h2"},"exec()")),(0,i.kt)("p",null,"Fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"exec()")," berguna untuk eksekusi string berisi kode Python. Cara penggunaannya mirip seperti ",(0,i.kt)("inlineCode",{parentName:"p"},"eval()"),". Contoh:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Eksekusi statement dengan operasi ",(0,i.kt)("em",{parentName:"p"},"assignment")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"a = 10\nb = 5\nc = 8\nres = 0\nexec('res = (a + b) / 20 + (c * c)')\nprint(res)\n# output \u279c 64.75\n")),(0,i.kt)("p",{parentName:"li"},"  Eksekusi ",(0,i.kt)("inlineCode",{parentName:"p"},"(a + b) / 20 + (c * c)")," nilainya disimpan ke variabel ",(0,i.kt)("inlineCode",{parentName:"p"},"res")," yang efeknya mengubah nilai variabel ",(0,i.kt)("inlineCode",{parentName:"p"},"res")," yang telah dideklarasikan.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Eksekusi perulangan"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},'r = 4\nstmt = """\nfor x in range(r):\n    print(x)\n"""\nexec(stmt)\n# output \u2193\n#\n# 0\n# 1\n# 2\n# 3\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Eksekusi kode berisi statement import dan fungsi"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},'r = 10\nres = 0\nstmt = """\nfrom typing import Final\n\nPI: Final = 3.14\n\ndef calculate_area_of_circle():\n    print(f"calculating area of circle with r: {r}")\n    return PI * r * r\n\nres = calculate_area_of_circle()\n"""\nexec(stmt)\nprint(res)\n# output \u2193\n#\n# calculating area of circle with r: 10\n# 314.0\n')))),(0,i.kt)("p",null,"Selama string berisi kode Python dengan syntax valid, maka bisa dijalankan via fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"exec()")," ini."),(0,i.kt)("h2",{id:"a573-fungsi-compile"},"A.57.3. Fungsi ",(0,i.kt)("inlineCode",{parentName:"h2"},"compile()")),(0,i.kt)("p",null,"Fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"compile()")," digunakan untuk kompilasi expression maupun kode Python, untuk kemudian digunakan pada fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"eval()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"exec()"),", ataupun untuk keperluan lainnya (seperti parse AST dan lainnya)."),(0,i.kt)("p",null,"Fungsi ini memiliki 3 parameter yang harus diisi saat pemanggilan:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Parameter ke-1 diisi dengan nilai string ",(0,i.kt)("em",{parentName:"li"},"expression")," atau kode Python"),(0,i.kt)("li",{parentName:"ul"},"Parameter ke-2 diisi string ",(0,i.kt)("inlineCode",{parentName:"li"},"'<string>'")),(0,i.kt)("li",{parentName:"ul"},"Parameter ke-3 diisi ",(0,i.kt)("inlineCode",{parentName:"li"},"eval")," atau ",(0,i.kt)("inlineCode",{parentName:"li"},"exec"))),(0,i.kt)("p",null,"Dengan mengkompilasi string terlebih dahulu, kita bisa mengantisipasi syntax error ataupun expression error yang ada dalam string tanpa harus mengeksekusinya terlebih dahulu."),(0,i.kt)("p",null,"Pengaplikasian fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"compile()")," dalam penggunaannya dibedakan berdasarkan isi string yang di-compile."),(0,i.kt)("h3",{id:"-compile-expression"},"\u25c9 Compile ",(0,i.kt)("em",{parentName:"h3"},"expression")),(0,i.kt)("p",null,"Penggunaan fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"compile()")," untuk ",(0,i.kt)("em",{parentName:"p"},"expression"),", parameter ke-3 perlu diisi nilai ",(0,i.kt)("inlineCode",{parentName:"p"},"'eval'"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"compiled = compile('expr', '<string>', 'eval')\nres = eval(compiled)\n")),(0,i.kt)("p",null,"Contoh:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"a = 10\nb = 5\nc = 8\ncompiled = compile('(a + b) / 20 + (c * c)', '<string>', 'eval')\narea = eval(compiled)\nprint(area)\n# output \u279c 64.75\n")),(0,i.kt)("h3",{id:"-compile-python-source-code"},"\u25c9 Compile ",(0,i.kt)("em",{parentName:"h3"},"Python source code")),(0,i.kt)("p",null,"Sedangkan untuk eksekusi kode Python, parameter ke-3 diisi nilai ",(0,i.kt)("inlineCode",{parentName:"p"},"'exec'"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"compiled = compile(stmt, '<string>', 'exec')\nres = exec(compiled)\n")),(0,i.kt)("p",null,"Contoh:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'r = 10\nres = 0\nstmt = """\nfrom typing import Final\n\nPI: Final = 3.14\n\ndef calculate_area_of_circle():\n    print(f"calculating area of circle with r: {r}")\n    return PI * r * r\n\nres = calculate_area_of_circle()\n"""\ncompiled = compile(stmt, \'<string>\', \'exec\')\narea = exec(compiled)\nprint(res)\n# output \u2193\n#\n# calculating area of circle with r: 10\n# 314.0\n')),(0,i.kt)("hr",null),(0,i.kt)("div",{class:"section-footnote"},(0,i.kt)("h2",{id:"catatan-chapter-"},"Catatan chapter \ud83d\udcd1"),(0,i.kt)("h3",{id:"-source-code-praktik"},"\u25c9 Source code praktik"),(0,i.kt)("pre",null,(0,i.kt)("a",{href:"https://github.com/novalagung/dasarpemrogramanpython-example/tree/master/eval-exec"},"github.com/novalagung/dasarpemrogramanpython-example/../eval-exec")),(0,i.kt)("h3",{id:"-referensi"},"\u25c9 Referensi"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/2220699/whats-the-difference-between-eval-exec-and-compile"},"https://stackoverflow.com/questions/2220699/whats-the-difference-between-eval-exec-and-compile")))))}k.isMDXComponent=!0}}]);