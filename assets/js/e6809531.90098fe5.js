"use strict";(self.webpackChunkdasarpemrogramanpython=self.webpackChunkdasarpemrogramanpython||[]).push([[841],{3905:(n,a,e)=>{e.d(a,{Zo:()=>p,kt:()=>d});var t=e(7294);function r(n,a,e){return a in n?Object.defineProperty(n,a,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[a]=e,n}function i(n,a){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(n,a).enumerable}))),e.push.apply(e,t)}return e}function o(n){for(var a=1;a<arguments.length;a++){var e=null!=arguments[a]?arguments[a]:{};a%2?i(Object(e),!0).forEach((function(a){r(n,a,e[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):i(Object(e)).forEach((function(a){Object.defineProperty(n,a,Object.getOwnPropertyDescriptor(e,a))}))}return n}function l(n,a){if(null==n)return{};var e,t,r=function(n,a){if(null==n)return{};var e,t,r={},i=Object.keys(n);for(t=0;t<i.length;t++)e=i[t],a.indexOf(e)>=0||(r[e]=n[e]);return r}(n,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(t=0;t<i.length;t++)e=i[t],a.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}var s=t.createContext({}),u=function(n){var a=t.useContext(s),e=a;return n&&(e="function"==typeof n?n(a):o(o({},a),n)),e},p=function(n){var a=u(n.components);return t.createElement(s.Provider,{value:a},n.children)},m="mdxType",c={inlineCode:"code",wrapper:function(n){var a=n.children;return t.createElement(t.Fragment,{},a)}},k=t.forwardRef((function(n,a){var e=n.components,r=n.mdxType,i=n.originalType,s=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),m=u(e),k=r,d=m["".concat(s,".").concat(k)]||m[k]||c[k]||i;return e?t.createElement(d,o(o({ref:a},p),{},{components:e})):t.createElement(d,o({ref:a},p))}));function d(n,a){var e=arguments,r=a&&a.mdxType;if("string"==typeof n||r){var i=e.length,o=new Array(i);o[0]=k;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=n,l[m]="string"==typeof n?n:r,o[1]=l;for(var u=2;u<i;u++)o[u]=e[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,e)}k.displayName="MDXCreateElement"},4925:(n,a,e)=>{e.r(a),e.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var t=e(7462),r=(e(7294),e(3905));const i={sidebar_position:32,title:"A.32. Python OOP \u279c Constructor",sidebar_label:"A.32. OOP \u279c Constructor"},o=void 0,l={unversionedId:"basic/class-constructor",id:"basic/class-constructor",title:"A.32. Python OOP \u279c Constructor",description:"Constructor/konstruktor adalah salah satu topik penting dalam pemrograman berbasis object (OOP). Konstruktor sendiri adalah fungsi khusus yang dipanggil saat pembuatan object dilakukan dari suatu class.",source:"@site/docs/basic/class-constructor.md",sourceDirName:"basic",slug:"/basic/class-constructor",permalink:"/basic/class-constructor",draft:!1,tags:[],version:"current",sidebarPosition:32,frontMatter:{sidebar_position:32,title:"A.32. Python OOP \u279c Constructor",sidebar_label:"A.32. OOP \u279c Constructor"},sidebar:"tutorialSidebar",previous:{title:"A.31. OOP \u279c Instance Method",permalink:"/basic/instance-method"},next:{title:"A.33. OOP \u279c Property Visibility",permalink:"/basic/property-visibility"}},s={},u=[{value:"A.32.1. Pengenalan constructor",id:"a321-pengenalan-constructor",level:2},{value:"A.32.2. Constructor dengan custom param",id:"a322-constructor-dengan-custom-param",level:2},{value:"A.32.3. Constructor overloading",id:"a323-constructor-overloading",level:2},{value:"Catatan chapter \ud83d\udcd1",id:"catatan-chapter-",level:2},{value:"\u25c9 Source code praktik",id:"-source-code-praktik",level:3},{value:"\u25c9 Chapter relevan lainnya",id:"-chapter-relevan-lainnya",level:3},{value:"\u25c9 Referensi",id:"-referensi",level:3}],p={toc:u},m="wrapper";function c(n){let{components:a,...e}=n;return(0,r.kt)(m,(0,t.Z)({},p,e,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Constructor/konstruktor adalah salah satu topik penting dalam pemrograman berbasis object (OOP). Konstruktor sendiri adalah fungsi khusus yang dipanggil saat pembuatan object dilakukan dari suatu class."),(0,r.kt)("p",null,"Pada chapter ini kita akan belajar tentang konstruktor dan apa saja yang bisa dilakukan didalamnya."),(0,r.kt)("h2",{id:"a321-pengenalan-constructor"},"A.32.1. Pengenalan constructor"),(0,r.kt)("p",null,"Di bahasa yang mengadopsi konsep OOP, setiap class memiliki ",(0,r.kt)("em",{parentName:"p"},"default constructor"),". Sebagai contoh pada statement pembuatan object bertipe class ",(0,r.kt)("inlineCode",{parentName:"p"},"Car"),", syntax ",(0,r.kt)("inlineCode",{parentName:"p"},"Car()")," digunakan dan syntax tersebut merupakan contoh penerapan pengaksesan konstruktor."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Sederhananya, konstruktor adalah kelas yang dipanggil seperti fungsi dengan notasi ",(0,r.kt)("inlineCode",{parentName:"p"},"<Class>()"),".")),(0,r.kt)("p",null,"Agar makin jelas, silakan praktekan kode sederhana berikut:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Mountain:\n    pass\n\nmount_everest = Mountain()\nprint(mount_everest)\n# output \u279c <__main__.Mountain object at 0x0000019118A13390>\n\nmount_kilimanjaro = Mountain()\nprint(mount_kilimanjaro)\n# output \u279c <__main__.Mountain object at 0x0000019118A11390>\n")),(0,r.kt)("p",null,"Class ",(0,r.kt)("inlineCode",{parentName:"p"},"Mountain")," dideklarasikan tanpa berisi apapun. Kelas tersebut bisa digunakan untuk membuat variabel object ",(0,r.kt)("inlineCode",{parentName:"p"},"mount_everest")," dan ",(0,r.kt)("inlineCode",{parentName:"p"},"mount_kilimanjaro")," dengan cara memanggil konstruktornya, yaitu ",(0,r.kt)("inlineCode",{parentName:"p"},"Mountain()"),"."),(0,r.kt)("p",null,"Dalam deklarasi class yang memiliki attribute, constructor wajib di-",(0,r.kt)("em",{parentName:"p"},"replace")," (atau istilah OOP-nya adalah di-",(0,r.kt)("em",{parentName:"p"},"override"),") dengan custom constructor yang didalamnya berisi deklarasi instance attribute."),(0,r.kt)("p",null,"Sebagai contoh, class ",(0,r.kt)("inlineCode",{parentName:"p"},"Mountain")," yang telah dibuat dimodifikasi dengan ditambahkan tiga buah instance attribute didalamnya yaitu ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"region"),", dan ",(0,r.kt)("inlineCode",{parentName:"p"},"elevation"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class Mountain:\n    def __init__(self):\n        self.name = ""\n        self.region = ""\n        self.elevation = 0\n    \n    def info(self):\n        print(f"name: {self.name}")\n        print(f"region: {self.region}")\n        print(f"elevation: {self.elevation}m")\n\nmount_everest = Mountain()\nmount_everest.name = "Everest"\nmount_everest.region = "Asia"\nmount_everest.elevation = 8848\nmount_everest.info()\n# output \u2193\n#\n# name: Everest\n# region: Asia\n# elevation: 8848m\n\nmount_kilimanjaro = Mountain()\nmount_kilimanjaro.name = "Kilimanjaro"\nmount_kilimanjaro.region = "Africa"\nmount_kilimanjaro.elevation = 5895\nmount_kilimanjaro.info()\n# output \u2193\n#\n# name: Kilimanjaro\n# region: Africa\n# elevation: 5895m\n')),(0,r.kt)("p",null,"Pada contoh di atas, konstruktor ",(0,r.kt)("inlineCode",{parentName:"p"},"__init__(self)")," meng-override default constructor milik class ",(0,r.kt)("inlineCode",{parentName:"p"},"Mountain")," dan digunakan untuk deklarasi instance attribute."),(0,r.kt)("h2",{id:"a322-constructor-dengan-custom-param"},"A.32.2. Constructor dengan custom param"),(0,r.kt)("p",null,"Konstruktor dapat didesain untuk memiliki parameter, dan metode ini sangat umum diterapkan."),(0,r.kt)("p",null,"Sebagai contoh, pada kode berikut class ",(0,r.kt)("inlineCode",{parentName:"p"},"Mountain")," konstruktornya dimodifikasi agar bisa menampung data argument untuk parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"region"),", dan ",(0,r.kt)("inlineCode",{parentName:"p"},"elevation"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class Mountain:\n    def __init__(self, name, region, elevation):\n        self.name = name\n        self.region = region\n        self.elevation = elevation\n    \n    def info(self):\n        print(f"name: {self.name}")\n        print(f"region: {self.region}")\n        print(f"elevation: {self.elevation}m")\n\nmount_everest = Mountain("Everest", "Asia", 8848)\nmount_everest.info()\n# output \u2193\n#\n# name: Everest\n# region: Asia\n# elevation: 8848m\n\nmount_kilimanjaro = Mountain("Kilimanjaro", "Africa", 5895)\nmount_kilimanjaro.info()\n# output \u2193\n#\n# name: Kilimanjaro\n# region: Africa\n# elevation: 5895m\n')),(0,r.kt)("p",null,"Seperti halnya method, parameter pertama konstruktor harus ",(0,r.kt)("inlineCode",{parentName:"p"},"self"),". Dari sini bisa disimpulkan berarti penambahan parameter harus dituliskan setelah ",(0,r.kt)("inlineCode",{parentName:"p"},"self"),". Bisa dilihat di deklarasi konstruktor class ",(0,r.kt)("inlineCode",{parentName:"p"},"Mountain"),", disitu ada tiga buah parameter dideklarasikan setelah ",(0,r.kt)("inlineCode",{parentName:"p"},"self"),"."),(0,r.kt)("h2",{id:"a323-constructor-overloading"},"A.32.3. Constructor overloading"),(0,r.kt)("p",null,"Overloading merupakan istilah OOP untuk pembuatan banyak konstruktor dengan jumlah dan tipe parameter berbeda."),(0,r.kt)("p",null,"Python tidak menyediakan API untuk penerapan constructor overloading, namun pada praktiknya bisa dicapai dengan ",(0,r.kt)("em",{parentName:"p"},"hack"),", misalnya menggunakan ",(0,r.kt)("a",{parentName:"p",href:"/basic/positional-optional-keyword-argument"},"opsional / keyword parameter")," atau menggunakan ",(0,r.kt)("a",{parentName:"p",href:"/basic/args-kwargs"},"*","args / ","*","*","kwargs"),"."),(0,r.kt)("p",null,"Contoh constructor overloading menggunakan opsional parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class Mountain:\n    def __init__(self, name = "", region = "", elevation = ""):\n        self.name = name\n        self.region = region\n        self.elevation = elevation\n    \n    def info(self):\n        print(f"name: {self.name}")\n        print(f"region: {self.region}")\n        print(f"elevation: {self.elevation}m")\n\nmount_everest = Mountain("Everest", "Asia", 8848)\nmount_everest.info()\n\nmount_kilimanjaro = Mountain("Kilimanjaro", "Africa")\nmount_kilimanjaro.elevation = 5895\nmount_kilimanjaro.info()\n\nmount_aconcagua = Mountain(name="Aconcagua", elevation=6961)\nmount_aconcagua.region = "South America"\nmount_aconcagua.info()\n\nmount_kosciuszko = Mountain()\nmount_kosciuszko.name = "Kosciuszko"\nmount_kosciuszko.region = "Australia"\nmount_kosciuszko.elevation = 2228\nmount_kosciuszko.info()\n')),(0,r.kt)("p",null,"Penjelasan:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Konstruktor class ",(0,r.kt)("inlineCode",{parentName:"li"},"Mountain")," didesain memiliki 3 buah parameter yang kesemuanya memiliki nilai default."),(0,r.kt)("li",{parentName:"ul"},"Variabel object ",(0,r.kt)("inlineCode",{parentName:"li"},"mount_everest")," dibuat dengan dengan mengisi kesemua parameter konstruktornya."),(0,r.kt)("li",{parentName:"ul"},"Variabel object ",(0,r.kt)("inlineCode",{parentName:"li"},"mount_kilimanjaro")," dibuat dengan dengan hanya mengisi dua parameter pertama konstruktor."),(0,r.kt)("li",{parentName:"ul"},"Variabel object ",(0,r.kt)("inlineCode",{parentName:"li"},"mount_aconcagua")," dibuat dengan dengan mengisi parameter ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," dan ",(0,r.kt)("inlineCode",{parentName:"li"},"elevation")," saja pada pemanggilan konstruktor."),(0,r.kt)("li",{parentName:"ul"},"Variabel object ",(0,r.kt)("inlineCode",{parentName:"li"},"mount_kosciuszko")," dibuat dengan tanpda diikuti dengan argument parameter. ")),(0,r.kt)("p",null,"Silakan coba explore dengan mempraktekan penggunaan ","*","args / ","*","*","kwargs pada konstruktor."),(0,r.kt)("hr",null),(0,r.kt)("div",{class:"section-footnote"},(0,r.kt)("h2",{id:"catatan-chapter-"},"Catatan chapter \ud83d\udcd1"),(0,r.kt)("h3",{id:"-source-code-praktik"},"\u25c9 Source code praktik"),(0,r.kt)("pre",null,(0,r.kt)("a",{href:"https://github.com/novalagung/dasarpemrogramanpython-example/tree/master/class-constructor"},"github.com/novalagung/dasarpemrogramanpython-example/../class-constructor")),(0,r.kt)("h3",{id:"-chapter-relevan-lainnya"},"\u25c9 Chapter relevan lainnya"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/basic/class-object"},"OOP \u279c Class & Object")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/basic/instance-method"},"OOP \u279c Instance Method")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/basic/property-visibility"},"OOP \u279c Property Visibility")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#"},"OOP \u279c Class Attribute & Method")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#"},"OOP \u279c Inheritance"))),(0,r.kt)("h3",{id:"-referensi"},"\u25c9 Referensi"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.python.org/3/tutorial/classes.html"},"https://docs.python.org/3/tutorial/classes.html")))))}c.isMDXComponent=!0}}]);