"use strict";(self.webpackChunkdasarpemrogramanpython=self.webpackChunkdasarpemrogramanpython||[]).push([[1632],{3905:(a,e,t)=>{t.d(e,{Zo:()=>b,kt:()=>d});var n=t(7294);function i(a,e,t){return e in a?Object.defineProperty(a,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):a[e]=t,a}function s(a,e){var t=Object.keys(a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(a);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),t.push.apply(t,n)}return t}function r(a){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){i(a,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(t,e))}))}return a}function l(a,e){if(null==a)return{};var t,n,i=function(a,e){if(null==a)return{};var t,n,i={},s=Object.keys(a);for(n=0;n<s.length;n++)t=s[n],e.indexOf(t)>=0||(i[t]=a[t]);return i}(a,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(a);for(n=0;n<s.length;n++)t=s[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(a,t)&&(i[t]=a[t])}return i}var o=n.createContext({}),u=function(a){var e=n.useContext(o),t=e;return a&&(t="function"==typeof a?a(e):r(r({},e),a)),t},b=function(a){var e=u(a.components);return n.createElement(o.Provider,{value:e},a.children)},p="mdxType",c={inlineCode:"code",wrapper:function(a){var e=a.children;return n.createElement(n.Fragment,{},e)}},k=n.forwardRef((function(a,e){var t=a.components,i=a.mdxType,s=a.originalType,o=a.parentName,b=l(a,["components","mdxType","originalType","parentName"]),p=u(t),k=i,d=p["".concat(o,".").concat(k)]||p[k]||c[k]||s;return t?n.createElement(d,r(r({ref:e},b),{},{components:t})):n.createElement(d,r({ref:e},b))}));function d(a,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof a||i){var s=t.length,r=new Array(s);r[0]=k;var l={};for(var o in e)hasOwnProperty.call(e,o)&&(l[o]=e[o]);l.originalType=a,l[p]="string"==typeof a?a:i,r[1]=l;for(var u=2;u<s;u++)r[u]=t[u];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}k.displayName="MDXCreateElement"},1910:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var n=t(7462),i=(t(7294),t(3905));const s={sidebar_position:37,title:"A.37. Python OOP \u279c Instance Attribute & Class Attribute",sidebar_label:"A.37. OOP \u279c Instance & Class Attribute"},r=void 0,l={unversionedId:"basic/instance-attribute-class-attribute",id:"basic/instance-attribute-class-attribute",title:"A.37. Python OOP \u279c Instance Attribute & Class Attribute",description:"Pada chapter ini, kita akan belajar lebih dalam tentang attribute suatu class, jenis-jenisnya, dan penerapannya.",source:"@site/docs/basic/instance-attribute-class-attribute.md",sourceDirName:"basic",slug:"/basic/instance-attribute-class-attribute",permalink:"/basic/instance-attribute-class-attribute",draft:!1,tags:[],version:"current",sidebarPosition:37,frontMatter:{sidebar_position:37,title:"A.37. Python OOP \u279c Instance Attribute & Class Attribute",sidebar_label:"A.37. OOP \u279c Instance & Class Attribute"},sidebar:"tutorialSidebar",previous:{title:"A.36. OOP \u279c Property Visibility",permalink:"/basic/property-visibility"},next:{title:"A.38. OOP \u279c Class Method",permalink:"/basic/class-method"}},o={},u=[{value:"A.37.1. Attributes",id:"a371-attributes",level:2},{value:"\u25c9 Instance attribute",id:"-instance-attribute",level:3},{value:"\u25c9 Class attribute",id:"-class-attribute",level:3},{value:"\u25c9 Kombinasi instance attribute &amp; class attribute",id:"-kombinasi-instance-attribute--class-attribute",level:3},{value:"A.37.2. Attribute lookup",id:"a372-attribute-lookup",level:2},{value:"A.37.3. Attribute mutability",id:"a373-attribute-mutability",level:2},{value:"\u25c9 Perubahan nilai instance attribute",id:"-perubahan-nilai-instance-attribute",level:3},{value:"\u25c9 Perubahan nilai class attribute dari instance object",id:"-perubahan-nilai-class-attribute-dari-instance-object",level:3},{value:"\u25c9 Perubahan nilai class attribute secara langsung",id:"-perubahan-nilai-class-attribute-secara-langsung",level:3},{value:"Catatan chapter \ud83d\udcd1",id:"catatan-chapter-",level:2},{value:"\u25c9 Source code praktik",id:"-source-code-praktik",level:3},{value:"\u25c9 Chapter relevan lainnya",id:"-chapter-relevan-lainnya",level:3},{value:"\u25c9 TBA",id:"-tba",level:3},{value:"\u25c9 Referensi",id:"-referensi",level:3}],b={toc:u},p="wrapper";function c(a){let{components:e,...s}=a;return(0,i.kt)(p,(0,n.Z)({},b,s,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Pada chapter ini, kita akan belajar lebih dalam tentang attribute suatu class, jenis-jenisnya, dan penerapannya."),(0,i.kt)("h2",{id:"a371-attributes"},"A.37.1. Attributes"),(0,i.kt)("p",null,"Attribute merupakan salah satu property class selain method. Python mengenal dua jenis attribute yaitu instance attribute (yang sudah kita bahas di beberapa chapter sebelumnya) dan class attribute."),(0,i.kt)("h3",{id:"-instance-attribute"},"\u25c9 Instance attribute"),(0,i.kt)("p",null,"Instance attribute adalah variabel yang terasosiasi dengan instance object, jadi pengaksesannya harus lewat object. Contoh penerapan instance attribute:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Pencil:\n\n    def __init__(self):\n        self.note = "A class type to represent a book"\n\npencil1 = Pencil()\nprint(f"Object pencil1 note: {pencil1.note}")\n# output \u279c Object pencil1 note: A class type to represent a book\n')),(0,i.kt)("p",null,"Pada contoh di atas, variabel ",(0,i.kt)("inlineCode",{parentName:"p"},"note")," merupakan instance attribute milik class ",(0,i.kt)("inlineCode",{parentName:"p"},"Pencil"),". Ciri khas attribute bisa dilihat dari tempat deklarasinya, yaitu di dalam konstruktor dan menempel pada variabel ",(0,i.kt)("inlineCode",{parentName:"p"},"self"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Instance attribute terkadang disebut dengan ",(0,i.kt)("strong",{parentName:"p"},"data attribute")," atau ",(0,i.kt)("strong",{parentName:"p"},"instance variable"),". Ketiga istilah tersebut merepresentasikan maksud yang sama.")),(0,i.kt)("h3",{id:"-class-attribute"},"\u25c9 Class attribute"),(0,i.kt)("p",null,"Class attribute adalah variabel yang terasosiasi dengan class yang pengaksesanya bisa langsung dari class atau bisa juga via object (seperti pengaksesan instance attribute). Contoh penerapan class attribute:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Book:\n    note = "A class type to represent a book"\n\nprint(f"Class Book note: {Book.note}")\n# output \u279c Class Book note: A class type to represent a book\n')),(0,i.kt)("p",null,"Berbeda dibanding contoh sebelumnya, kali ini variabel ",(0,i.kt)("inlineCode",{parentName:"p"},"note")," dideklarasikan langsung di bawah blok ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," (tidak di dalam konstruktor) dan tidak ditempelkan ke variabel ",(0,i.kt)("inlineCode",{parentName:"p"},"self"),". Cara deklarasi class attribute bisa dibilang sama seperti deklarasi variabel bisa."),(0,i.kt)("p",null,"Class attribute bisa diakses langsung dari class contohnya seperti pada kode di atas, selain itu bisa juga diakses lewat instance object. Contoh:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Book:\n    note = "A class type to represent a book"\n\nprint(f"Class Book note: {Book.note}")\n# output \u279c Class Book note: A class type to represent a book\n\nbook1 = Book()\nprint(f"Object book1 note: {book1.note}")\n# output \u279c Object book1 note: A class type to represent a book\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Class attribute terkadang disebut dengan ",(0,i.kt)("strong",{parentName:"p"},"class variable"),". Kedua istilah tersebut merepresentasikan maksud yang sama.")),(0,i.kt)("h3",{id:"-kombinasi-instance-attribute--class-attribute"},"\u25c9 Kombinasi instance attribute & class attribute"),(0,i.kt)("p",null,"Instance attribute dan class attribute keduanya bisa digunakan secara bersamaan dalam satu class yang sama. Penerapannya cukup umum, misalnya pada kasus dimana ada class yang memiliki 2 kategori attribute. Misalnya pada class ",(0,i.kt)("inlineCode",{parentName:"p"},"Song")," berikut, ada attribute yang berasosiasi langsung dengan class yaitu ",(0,i.kt)("inlineCode",{parentName:"p"},"note")," & ",(0,i.kt)("inlineCode",{parentName:"p"},"version"),"; dan ada juga attribute lainnya yang berasosiasi dengan instance object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Song:\n    note = "A class type to represent a song"\n    version = 1.0\n    \n    def __init__(self, name = "", artist = "", album = "", released_year = 2000):\n        self.name = name\n        self.artist = artist\n        self.album = album\n        self.released_year = released_year\n\n    def info(self):\n        print(f"Song: {self.name} by {self.artist}")\n        print(f"Album: {self.album}")\n        print(f"Released year: {self.released_year}")\n\nsongs = [\n    Song(\n        name="The Ytse Jam",\n        artist="Dream Theater",\n        album="When Dream and Day Unite",\n        released_year=2004\n    ),\n    Song(\n        name="Always with Me, Always with You",\n        artist="Joe Satriani",\n        album="Surfing with the Alien",\n        released_year=1987\n    ),\n]\n\nprint(f"Class: Song, version: {Song.version}, note: {Song.note}")\n\nfor s in songs:\n    s.info()\n')),(0,i.kt)("p",null,"Output program:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Class attribute &amp; classs method",src:t(9098).Z,width:"538",height:"207"})),(0,i.kt)("p",null,"Class attribute biasanya diterapkan untuk menyimpan data yang sifatnya global dan tidak terpaut ke object, contohnya seperti attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"note")," dan ",(0,i.kt)("inlineCode",{parentName:"p"},"version")," pada class ",(0,i.kt)("inlineCode",{parentName:"p"},"Song")," di atas."),(0,i.kt)("p",null,"Berbeda dengan instance attribute yang digunakan untuk menyimpan data spesifik per object. Bisa dilihat di contoh ada list berisi 2 element yang dibuat dari class ",(0,i.kt)("inlineCode",{parentName:"p"},"Song"),". Masing-masing instance object tersebut data attribute-nya berbeda satu sama lain."),(0,i.kt)("h2",{id:"a372-attribute-lookup"},"A.37.2. Attribute lookup"),(0,i.kt)("p",null,"Saat suatu instance attribtue diakses dari instance object, yang terjadi di balik layar adalah Python melakukan ",(0,i.kt)("em",{parentName:"p"},"lookup")," (atau pengecekan) terhadap attribute dengan urutan sebagai berikut:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Jika instance attribute ditemukan, maka Python mengembalikan value instance attribute."),(0,i.kt)("li",{parentName:"ol"},"Jika instance attribute yang dicari tidak ditemukan, maka Python mengembalikan value class attribute."),(0,i.kt)("li",{parentName:"ol"},"Jika class attribute yang dicari tidak ditemukan, maka error.")),(0,i.kt)("p",null,"Dari kondisi lookup di atas bisa disimpulkan bahwa sewaktu pengaksesan instance attribute, Python selalu memprioritaskan data yang ada di instance attribute dibanding property lainnya."),(0,i.kt)("p",null,"Lalu bagaiamana jika misalnya ada class yang miliki class attribute dan juga instance attribute yang namanya sama persis? Jawabannya: Python tetap memprioritaskan nilai instance attribute."),(0,i.kt)("p",null,"Contoh bisa dilihat pada kode berikut:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Person:\n    name = "A person"\n    \n    def __init__(self, name):\n        self.name = name\n\nperson1 = Person("Noval Agung Prayogo")\nprint(f"Object person1 name: {person1.name}")\n# output \u279c Object person1 name: Noval Agung Prayogo\n\nprint(f"Class Person name: {Person.name}")\n# output \u279c Class Person name: A person\n')),(0,i.kt)("p",null,"Variabel ",(0,i.kt)("inlineCode",{parentName:"p"},"person1")," ketika diakses attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),"-nya, yang dikembalikan adalah nilai instance attribute, meskipun sebenarnya class ",(0,i.kt)("inlineCode",{parentName:"p"},"Person")," juga memiliki class attribute dengan nama yang sama."),(0,i.kt)("h2",{id:"a373-attribute-mutability"},"A.37.3. Attribute mutability"),(0,i.kt)("h3",{id:"-perubahan-nilai-instance-attribute"},"\u25c9 Perubahan nilai instance attribute"),(0,i.kt)("p",null,"Instance attribute datanya adalah menempel ke instance object. Jadinya, setiap object bisa saja memiliki attribute dengan value berbeda satu sama lain."),(0,i.kt)("p",null,"Dimisalkan ada satu variabel object yang nilai attribute-nya diubah, maka efek perubahan hanya terjadi di variabel tersebut saja, tidak berefek ke variabel lain. Agar lebih jelas silakan lihat contoh berikut:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Pencil:\n\n    def __init__(self):\n        self.note = "A class type to represent a book"\n\npencil1 = Pencil()\npencil1.note = "A pencil"\npencil2 = Pencil()\n\nprint(f"Object pencil1 note: {pencil1.note}")\n# output \u279c Object pencil1 note: A pencil\n\nprint(f"Object pencil2 note: {pencil2.note}")\n# output \u279c Object pencil2 note: A class type to represent a book\n')),(0,i.kt)("h3",{id:"-perubahan-nilai-class-attribute-dari-instance-object"},"\u25c9 Perubahan nilai class attribute dari instance object"),(0,i.kt)("p",null,"Bagaimana jika attribute yang diubah adalah class attribute, dan perubahan dilakukan lewat instance object? Jawabannya: nilai baru hasil operasi assignment tersebut akan ditampung sebagai nilai instance attribute dan efeknya hanya ada pada object saja (tidak berefek ke class). Contoh:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Book:\n    note = "A class type to represent a book"\n\nbook1 = Book()\nbook2 = Book()\nbook2.note = "A book"\n\nprint(f"Class Book note: {Book.note}")\n# output \u279c Class Book note: A class type to represent a book\n\nprint(f"Object book1 note: {book1.note}")\n# output \u279c Object book2 note: A class type to represent a book\n\nprint(f"Object book2 note: {book2.note}")\n# output \u279c Object book1 note: A book\n\nprint(f"Class Book note: {Book.note}")\n# output \u279c Class Book note: A class type to represent a book\n')),(0,i.kt)("p",null,"Bisa dilihat pada bagian statement ",(0,i.kt)("inlineCode",{parentName:"p"},'book2.note = "A book"')," efek peruabahannya hanya pada instance object-nya (",(0,i.kt)("inlineCode",{parentName:"p"},"book2"),"). Class attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"Book.note")," nilainya tetap."),(0,i.kt)("h3",{id:"-perubahan-nilai-class-attribute-secara-langsung"},"\u25c9 Perubahan nilai class attribute secara langsung"),(0,i.kt)("p",null,"Beda lagi untuk kasus dimana attribute yang diubah nilainya adalah class attribute dengan perubahan dilakukan secara langsung dari class-nya. Perubahan tersebut akan berefek ke semua object dan class itu sendiri."),(0,i.kt)("p",null,"Sebagai contoh, pada kode berikut, object ",(0,i.kt)("inlineCode",{parentName:"p"},"book1")," dan ",(0,i.kt)("inlineCode",{parentName:"p"},"book2")," dibuat dari class ",(0,i.kt)("inlineCode",{parentName:"p"},"Book"),". Kemudian class attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"Book.note")," diubah nilainya, efeknya: class attribute dalam ",(0,i.kt)("inlineCode",{parentName:"p"},"book1")," dan ",(0,i.kt)("inlineCode",{parentName:"p"},"book2")," juga ikut berubah."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class Book:\n    note = "A class type to represent a book"\n\nbook1 = Book()\nbook2 = Book()\n\nBook.note = "A book"\n\nprint(f"Class Book note: {Book.note}")\n# output \u279c Class Book note: A book\n\nprint(f"Object book1 note: {book1.note}")\n# output \u279c Object book1 note: A book\n\nprint(f"Object book2 note: {book2.note}")\n# output \u279c Object book2 note: A book\n')),(0,i.kt)("hr",null),(0,i.kt)("div",{class:"section-footnote"},(0,i.kt)("h2",{id:"catatan-chapter-"},"Catatan chapter \ud83d\udcd1"),(0,i.kt)("h3",{id:"-source-code-praktik"},"\u25c9 Source code praktik"),(0,i.kt)("pre",null,(0,i.kt)("a",{href:"https://github.com/novalagung/dasarpemrogramanpython-example/tree/master/instance-attribute-class-attribute"},"github.com/novalagung/dasarpemrogramanpython-example/../instance-attribute-class-attribute")),(0,i.kt)("h3",{id:"-chapter-relevan-lainnya"},"\u25c9 Chapter relevan lainnya"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/basic/class-object"},"OOP \u279c Class & Object")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/basic/property-visibility"},"OOP \u279c Property Visibility"))),(0,i.kt)("h3",{id:"-tba"},"\u25c9 TBA"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"list-type attribute behaviour on class attribute vs instance attribute")),(0,i.kt)("h3",{id:"-referensi"},"\u25c9 Referensi"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.python.org/3/tutorial/classes.html"},"https://docs.python.org/3/tutorial/classes.html")))))}c.isMDXComponent=!0},9098:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/instance-attribute-class-attribute-1-bc7fbf552b3807416a481df95cad75da.png"}}]);